package org.example.contact;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.assertj.core.api.recursive.comparison.RecursiveComparisonConfiguration;
import org.example.persistence.ContactDetails;
import org.example.persistence.ContactRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.util.Collections;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)
class ContactControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private ContactRepository contactRepository;

    private ObjectMapper objectMapper;

    @Test
    void whenGetContacts_thenReturnValidSetOfRecords_andReturn200() throws Exception {
        //given
        when(contactRepository.findAll()).thenReturn(Collections.EMPTY_LIST);

//        when
        mockMvc.perform(
                get("/contacts"))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(content().string(containsString("[]")));
    }

    @Test
    void whenPostContacts_thenReturnValidSetOfRecords_andReturn200() throws Exception {
        //given
        objectMapper = new ObjectMapper();
        ContactDetails requestBody = new ContactDetails(0L, "Tom", "Smith", "ts@example.com", "079678234");

        when(contactRepository.save(any())).thenReturn(requestBody);

        MvcResult result = mockMvc.perform(post("/contact")
                        .content(objectMapper.writeValueAsBytes(requestBody))
                        .contentType(MediaType.APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isCreated())
                .andReturn();

        ContactDetails responseBody = objectMapper.readValue(result.getResponse().getContentAsString(), ContactDetails.class);

        //UUID is generated by app
        assertThat(requestBody).usingRecursiveComparison().ignoringFields("uuid").isEqualTo(responseBody);
    }

    @Test
    void whenDelete_thenObjectDeleted_andReturn204() throws Exception {
        //when
        objectMapper = new ObjectMapper();
        ContactDetails requestBody = new ContactDetails(0L, "Tom", "Smith", "ts@example.com", "079678234");
        doNothing().when(contactRepository).deleteById("0");

        MvcResult result = mockMvc.perform(delete("/contact/0")
                    .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent())
                .andReturn();

        verify(contactRepository).deleteById("0");
    }
}