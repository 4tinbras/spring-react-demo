import {Table} from "reactstrap";
import React, {FormEventHandler, MouseEventHandler, useContext, useState} from "react";
import {ContactState, ContactViewModel, FormStatus} from './utils';
import {ContactsDispatchContext} from "@/app/ContactsBlockContext";

export default function ContactsList({contacts, handleClick}:
                                     {contacts: ContactViewModel[], handleClick: any}) {

// @ts-ignore
    const listItems = contacts.map((contactvm: ContactViewModel) => {

      const props = {
          readOnly: undefined
      };
        if (!contactvm.active) {
            // @ts-ignore
            props.readOnly = contactvm.active
      }

      // TODO: via props readonly isn't picked up; via property it is always present
        return <tr key={`${contactvm.contact.uuid}`}>
            <ContactsRecord key={`${contactvm.contact.uuid}records`} contactvm={contactvm}
                            handleClick={handleClick}></ContactsRecord>
          {/*needs to set status text based on cell state*/}
          <th>Prompt</th>
      </tr>;
      }
  );

    const formsList = contacts.map((contactvm: ContactViewModel) => {

        return <RecordForm key={`form${contactvm.contact.uuid}`} contact={contactvm.contact}></RecordForm>
    });

    return <div>
        <div>
            {formsList}
        </div>
        <Table className={"table-striped-columns"}>
      <caption>
          Known contacts
      </caption>
      <thead>
      <tr>
          <th scope="col">First Name</th>
          <th scope="col">Last Name</th>
          <th scope="col">Phone no.</th>
          <th scope="col">Email address</th>
      </tr>
      </thead>
      <tbody>
        {listItems}
      </tbody>
        </Table>
    </div>
}

export function ContactsRecord({contactvm, handleClick}: { contactvm: ContactViewModel, handleClick: any }) {
    const contact: ContactState = contactvm.contact;

    return <>
        <td><input type="text" name="firstName" form={`form${contact.uuid}`} defaultValue={contact.firstName}></input>
        </td>
        <td><input type="text" name="lastName" form={`form${contact.uuid}`} defaultValue={contact.lastName}></input>
        </td>
        <td><input type="text" name="phoneNo" form={`form${contact.uuid}`} defaultValue={contact.phoneNo}></input></td>
        <td><input type="text" name="email" form={`form${contact.uuid}`} defaultValue={contact.email}></input></td>
        <td><EditContactButton contactvm={contactvm}
                               onClick={(event) => handleClick(event, contactvm)}></EditContactButton></td>
        <td hidden><input hidden readOnly type="text" name="uuid" form={`form${contact.uuid}`}
                          defaultValue={contact.uuid}></input></td>
    </>;
}

export function EditContactButton({contactvm, onClick}: { contactvm: ContactViewModel, onClick: MouseEventHandler }) {
    return <button onClick={onClick} key={`Edit${contactvm.contact.uuid}`}
                   form={`form${contactvm.contact.uuid}`}>{contactvm.contact.active ? `Save` : `Edit`}</button>;
}

export function RecordForm({contact}: { contact: ContactState }) {
    const fieldsArray = ['firstName', 'lastName', 'email', 'phoneNo', 'uuid'];

    const [responseData, setData] = useState<[]>([]);
    const dispatch = useContext(ContactsDispatchContext);

    const useSubmitForm = (
        url: string,
        fields: string[],
    ): [FormEventHandler, string, []] => {

        // NB: While id is autogenerated number - it cannot create a new record, for that it would have to drop uuid
        // so that it was autogenerated
        const fetchData = async (formData: any) => {
            // @ts-ignore
            dispatch({type: FormStatus.Pending.toString(), payload: null});

            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        Accept: "*",
                        "Access-Control-Allow-Origin": "*",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                setData(data);
                // @ts-ignore
                dispatch({type: FormStatus.Ok.toString(), payload: null});
            } catch (err: any) {
                setData(err);
                // @ts-ignore
                dispatch({type: FormStatus.Failed.toString(), payload: null});
            }
        };

        const onSubmit = (e: any) => {
            e.preventDefault();


            const formData = fields.reduce((formData, field) => ({
                ...formData,
                [field]: e.target[field].value,
            }), {});
            fetchData(formData);
        }

        // @ts-ignore
        return [onSubmit, status, responseData];
    };

    const [onSubmit, refStatus, data] = useSubmitForm(
        `http://localhost:8080/contact`,
        fieldsArray
    );

    return <form id={`form${contact.uuid}`} name={`form${contact.uuid}`} onSubmit={onSubmit}></form>
}